<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浅谈反射</title>
      <link href="/2021/11/10/%E6%B5%85%E8%B0%88%E5%8F%8D%E5%B0%84/"/>
      <url>/2021/11/10/%E6%B5%85%E8%B0%88%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="反射概述"><a href="#反射概述" class="headerlink" title="反射概述"></a>反射概述</h1><h2 id="1-动态语言-amp-静态语言"><a href="#1-动态语言-amp-静态语言" class="headerlink" title="1.动态语言&amp;静态语言"></a>1.动态语言&amp;静态语言</h2><p>从声明变量方式看动态与静态语言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String author = <span class="string">&quot;CoderKled&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dream <span class="operator">=</span> <span class="string">&quot;Tencet&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">distance = <span class="string">&quot;far&quot;</span></span><br></pre></td></tr></table></figure><p>可以看出动态语言与静态语言的区别之一在于：</p><p>静态语言判断变量自身的类型信息需要靠声明</p><p>动态语言的变量的类型信息则是根据其值来判断</p><p>Java不是动态语言，但是可以被称为是“准动态”，其原因在于Java具有一定的动态性，它是由反射机制等所赋予的。</p><h2 id="2-反射功能"><a href="#2-反射功能" class="headerlink" title="2.反射功能"></a>2.反射功能</h2><ul><li><strong>在运行时</strong>分析类的能力（如判断对象所属类，获取类的所有成员变量与方法信息等）</li><li>在运行时检查对象（例如，编写一个适用于所有类的toString方法）</li><li>实现泛型数组操作代码</li><li>利用Method对象</li><li>生成动态代理</li></ul><p>*反射可以在不通过修改源码的情况下控制程序</p><p>*在反射中，方法也是对象，可以用方法对象来调用方法</p><h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。就像一面镜子，透过它就能看到该对象所属类的信息。</p><p>Java运行时系统始终会为所有对象维护一个<strong>运行时类型标识</strong>，这个信息会跟踪每个对象所属的类。虚拟机利用运行时类型信息选择要执行的方法。</p><p>笔者理解为，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animal a = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure><p>a对象的编译类型是Animal，运行类型是Cat，该运行类型标识会一直伴随a对象的整个生命周期</p><h2 id="1-获取Class对象"><a href="#1-获取Class对象" class="headerlink" title="1.获取Class对象"></a>1.获取Class对象</h2><ul><li>方式一：getClass()  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Coder kled = <span class="keyword">new</span> Coder();</span><br><span class="line">Class c = kled.getClass();</span><br></pre></td></tr></table></figure><p>此处呼应前文所讲，系统维护的是一个运行时类型标识，所以getClass得到的是运行类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animal cat = <span class="keyword">new</span> Cat();</span><br><span class="line">System.out.println(cat.getClass());</span><br></pre></td></tr></table></figure><p><img src="/images/image-20211110210804735.png" alt="image-20211110210804735"></p><ul><li>方式二：静态方法forName()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="string">&quot;Coder&quot;</span>;</span><br><span class="line">Class c = Class.forName(name);</span><br></pre></td></tr></table></figure><ul><li>方式三：类型.class（可以是基本数据类型或void关键字）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class c1 = <span class="keyword">int</span>.class;</span><br><span class="line">Class c2 = String.class;</span><br><span class="line">Class c3 = Double[].class;</span><br></pre></td></tr></table></figure><p>由于虚拟机只为每个类型管理<strong>唯一一个</strong>Class对象，所以是可以用==来对两个Class进行对比的。</p><p><strong>突击复习instanceof</strong></p><p>判断对象是否是这个特定类或者是它的子类的一个实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(cat.getClass() == Cat.class);</span><br><span class="line">System.out.println(cat.getClass() == Animal.class);</span><br><span class="line">System.out.println(cat <span class="keyword">instanceof</span>  Animal);</span><br><span class="line">System.out.println(cat <span class="keyword">instanceof</span>  Cat);</span><br></pre></td></tr></table></figure><p><img src="/images/image-20211110210732793.png" alt="image-20211110210732793"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 反射 </tag>
            
            <tag> Java SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jj</title>
      <link href="/2021/11/10/%E8%AE%A1%E7%BD%91/"/>
      <url>/2021/11/10/%E8%AE%A1%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h1 id="1-第一章"><a href="#1-第一章" class="headerlink" title="1.第一章"></a>1.第一章</h1><h2 id="计算机网络的概念"><a href="#计算机网络的概念" class="headerlink" title="*计算机网络的概念"></a>*<strong>计算机网络的概念</strong></h2><p>一个将分散的具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统</p><p>是互连的，自治的计算机集合  （自治：没有主从关系）</p><h2 id="功能"><a href="#功能" class="headerlink" title="*功能"></a>*功能</h2><p>1.数据通信</p><p>2.资源共享（硬件资源，软件资源，数据资源）</p><p>3.分布式处理</p><p>4.提高可靠性（一个电脑宕机了，另一个替换上）</p><h2 id="性能指标"><a href="#性能指标" class="headerlink" title="*性能指标"></a>*性能指标</h2><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108143710289.png" alt="image-20211108143710289"></p><h3 id="带宽（b-s）"><a href="#带宽（b-s）" class="headerlink" title="带宽（b/s）"></a><strong>带宽（b/s）</strong></h3><p><strong>（是一种理想的速率）</strong></p><p>单位时间内从网络中的某一点到零一点所能通过的最高数据率</p><p>带宽影响的是单位时间能从发送端进入链路的数据的多少<strong>（发送快慢）</strong>，并不影响传输过程中比特的传播速度</p><h3 id="吞吐量（b-s）"><a href="#吞吐量（b-s）" class="headerlink" title="吞吐量（b/s）"></a><strong>吞吐量</strong>（b/s）</h3><p><strong>（实际的速率）</strong></p><p>单位时间通过某网络的数据量</p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108141925399.png" alt="image-20211108141925399"></p><p><strong>时延</strong>    发送时延，传播时延，排队时延，处理时延</p><p>发送时延：从电脑推送到信道上的时间（发生在机器内）</p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108142203220.png" alt="image-20211108142203220"></p><p>传播时延（取决于电磁波速度与链路长度） （发生在机器外）</p><p>从在信道上开始到碰到终端的时间</p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108142323824.png" alt="image-20211108142323824"></p><p>排队时延</p><p>等待路由器处理</p><p>处理时延</p><p>检错等</p><h3 id="时延带宽积-bit"><a href="#时延带宽积-bit" class="headerlink" title="时延带宽积 bit"></a><strong>时延带宽积</strong> bit</h3><p>  <strong>此时此刻的数据量</strong></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108143244966.png" alt="image-20211108143244966"></p><h3 id="往返时延RTT"><a href="#往返时延RTT" class="headerlink" title="往返时延RTT"></a><strong>往返时延RTT</strong></h3><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108143315047.png" alt="image-20211108143315047"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108143442537.png" alt="image-20211108143442537"></p><h2 id="分层结构-协议-接口-服务"><a href="#分层结构-协议-接口-服务" class="headerlink" title="分层结构/协议/接口/服务"></a>分层结构/协议/接口/服务</h2><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108150531317.png" alt="image-20211108150531317"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108150650362.png" alt="image-20211108150650362"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108151155156.png" alt="image-20211108151155156"></p><h3 id="1-OSI"><a href="#1-OSI" class="headerlink" title="1.OSI"></a>1.OSI</h3><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a><strong>应用层</strong></h4><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108151931953.png" alt="image-20211108151931953"></p><h4 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a><strong>表示层</strong></h4><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108152053172.png" alt="image-20211108152053172"></p><h4 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a><strong>会话层</strong></h4><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108152330366.png" alt="image-20211108152330366"></p><p><strong>传输层</strong></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108152515496.png" alt="image-20211108152515496"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108153040514.png" alt="image-20211108153040514"></p><p>复用就是多个进程的进程上同一条船，船开走</p><p>分用就是船到达后船上不同的进程又各找各妈。</p><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a><strong>网络层</strong></h4><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108153344419.png" alt="image-20211108153344419"></p><h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108153530984.png" alt="image-20211108153530984"></p><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211108153711686.png" alt="image-20211108153711686"></p><h3 id="2-tcp-ip模型和5层参考模型"><a href="#2-tcp-ip模型和5层参考模型" class="headerlink" title="2.tcp/ip模型和5层参考模型"></a>2.tcp/ip模型和5层参考模型</h3><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211109093626962.png" alt="image-20211109093626962"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211109094014925.png" alt="image-20211109094014925"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211109094107852.png" alt="image-20211109094107852"></p><h1 id="2-物理层"><a href="#2-物理层" class="headerlink" title="2.物理层"></a>2.物理层</h1><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211109094657353.png" alt="image-20211109094657353"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211109144102637.png" alt="image-20211109144102637"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211109144308547.png" alt="image-20211109144308547"></p><h2 id="1-速率"><a href="#1-速率" class="headerlink" title="1.速率"></a>1.速率</h2><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211109145208254.png" alt="image-20211109145208254"></p><p>把数据从电脑发送到信道上的速率，不是指传播速率</p><p>*码元传输速率：1s传输多少个码元    1波特：1码元/s</p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211109145541465.png" alt="image-20211109145541465"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211109145556677.png" alt="image-20211109145556677"></p><p>带宽是一个理想值</p><h2 id="2-香农定理和奈式准则"><a href="#2-香农定理和奈式准则" class="headerlink" title="2.香农定理和奈式准则"></a>2.香农定理和奈式准则</h2><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211109155540217.png" alt="image-20211109155540217"></p><p><strong>奈式准则规定了最高的码元传输速率，香农规定最高比特传输速率（并且考虑到了电磁干扰）</strong></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211109160050295.png" alt="image-20211109160050295"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211109160323698.png" alt="image-20211109160323698"></p><p><strong>香农</strong></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211109160833421.png" alt="image-20211109160833421"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211109160942652.png" alt="image-20211109160942652"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211109161001624.png" alt="image-20211109161001624"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211110094856428.png" alt="image-20211110094856428"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211110095206733.png" alt="image-20211110095206733"></p><h2 id="3-编码-amp-调制"><a href="#3-编码-amp-调制" class="headerlink" title="3.编码&amp;调制"></a>3.编码&amp;调制</h2><p><strong>区分基带信号和宽带信号的方法</strong></p><p>看信号往哪种信道上传。如果往数字信道上送就是基带，往模拟信道上送就是宽带信号。</p><p>宽带信号是将基带信号进行调制的信号，用于远距离传输</p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211110100105132.png" alt="image-20211110100105132"></p><h3 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h3><p><strong><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211110100212518.png" alt="image-20211110100212518"></strong></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211110100220515.png" alt="image-20211110100220515"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211110100515230.png" alt="image-20211110100515230"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211110100619815.png" alt="image-20211110100619815"></p><h3 id="调制方式"><a href="#调制方式" class="headerlink" title="调制方式"></a>调制方式</h3><p><strong>数字-&gt;模拟</strong></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211110101009034.png" alt="image-20211110101009034"></p><p><strong>模拟-&gt;数字</strong></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20211110101448551.png" alt="image-20211110101448551"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/10/hello-world/"/>
      <url>/2021/11/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
